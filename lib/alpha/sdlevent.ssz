
lib sdl = <alpha/sdlplugin.ssz>;

uint nexttime = 0x0, lastdraw = 0x0;
float nexttimeFractionalPart = 0.0;
public &sdl.Event sdle;
public bool end = false, fskip = false, full = false, esc = false,
		 upKey = false, downKey = false, leftKey = false, rightKey = false, 
		 aKey = false, bKey = false, cKey = false, dKey = false, eKey = false,
		 fKey = false, gKey = false, hKey = false, iKey = false, jKey = false,
		 kKey = false, lKey = false, mKey = false, nKey = false, oKey = false,
		 pKey = false, qKey = false, rKey = false, sKey = false, tKey = false,
		 uKey = false, vKey = false, wKey = false, xKey = false, yKey = false,
		 zKey = false,
		 kzeroKey = false, koneKey = false, ktwoKey = false, kthreeKey = false, kfourKey = false,
		 kfiveKey = false, ksixKey = false, ksevenKey = false, keightKey = false, knineKey = false,
		 zeroKey = false, oneKey = false, twoKey = false, threeKey = false, fourKey = false,
		 fiveKey = false, sixKey = false, sevenKey = false, eightKey = false, nineKey = false,
		 returnKey = false, lshiftKey = false, rshiftKey = false,
		 joystickA = false;
public &Key
{
  public |.sdl.K key = .sdl.K::UNKNOWN;
  public bool shift = false, ctrl = false, alt = false;
  public bool down = false;
  public void reset()
  {
    `down = false;
  }
  public void checkDown(|.sdl.K k, ushort m)
  {
    `down |=
       `key == k
       && `shift == (
         (m & (.sdl.KMOD_LSHIFT | .sdl.KMOD_RSHIFT)) != 0x0)
       && `ctrl == (
         (m & (.sdl.KMOD_LCTRL | .sdl.KMOD_RCTRL)) != 0x0)
       && `alt == (
         (m & (.sdl.KMOD_LALT | .sdl.KMOD_RALT)) != 0x0);
  }
}

public %&Key eventKeys;

public bool eventUpdate()
{
  loop{index i = 0; while; do:
    .eventKeys[i].reset();
    i++;
  while i < #.eventKeys:
  }
  loop{
    while;
  do:
    switch(.sdle.etype){
    case .sdl.EventType::QUIT:// ウィンドウの×ボタンが押された時など
      .end = true;
      ret false;
    case .sdl.EventType::KEYDOWN:
      loop{index i = 0; while; do:
        .eventKeys[i].checkDown(.sdle.key.keysym.sym, .sdle.key.keysym.mod);
        i++;
      while i < #.eventKeys:
      }
      branch{
      cond (.sdle.key.keysym.mod & (.sdl.KMOD_LALT | .sdl.KMOD_RALT)) != 0x0:
        switch(.sdle.key.keysym.sym){
        case .sdl.K::RETURN:
          if(.sdl.fullScreen(!!.full)) .sdl.showCursor(!.full);
        case .sdl.K::F4:
          .end = true;
          ret false;
        }
      cond (.sdle.key.keysym.mod & (.sdl.KMOD_LCTRL | .sdl.KMOD_RCTRL)) != 0x0:
      else:
        switch(.sdle.key.keysym.sym){
        case .sdl.K::ESCAPE:
          .esc = true;
        }
        switch(.sdle.key.keysym.sym){
        case .sdl.K::UP:
          .upKey = true;
        }
        switch(.sdle.key.keysym.sym){
        case .sdl.K::DOWN:
          .downKey = true;
        }
        switch(.sdle.key.keysym.sym){
        case .sdl.K::LEFT:
          .leftKey = true;
        }
        switch(.sdle.key.keysym.sym){
        case .sdl.K::RIGHT:
          .rightKey = true;
        }
        switch(.sdle.key.keysym.sym){
        case .sdl.K::a:
          .aKey = true;
        }
        switch(.sdle.key.keysym.sym){
        case .sdl.K::b:
          .bKey = true;
        }
        switch(.sdle.key.keysym.sym){
        case .sdl.K::c:
          .cKey = true;
        }
        switch(.sdle.key.keysym.sym){
        case .sdl.K::d:
          .dKey = true;
        }
        switch(.sdle.key.keysym.sym){
        case .sdl.K::e:
          .eKey = true;
        }
        switch(.sdle.key.keysym.sym){
        case .sdl.K::f:
          .fKey = true;
        }
        switch(.sdle.key.keysym.sym){
        case .sdl.K::g:
          .gKey = true;
        }
        switch(.sdle.key.keysym.sym){
        case .sdl.K::h:
          .hKey = true;
        }
        switch(.sdle.key.keysym.sym){
        case .sdl.K::i:
          .iKey = true;
        }
        switch(.sdle.key.keysym.sym){
        case .sdl.K::j:
          .jKey = true;
        }
        switch(.sdle.key.keysym.sym){
        case .sdl.K::k:
          .kKey = true;
        }
        switch(.sdle.key.keysym.sym){
        case .sdl.K::l:
          .lKey = true;
        }
        switch(.sdle.key.keysym.sym){
        case .sdl.K::m:
          .mKey = true;
        }
        switch(.sdle.key.keysym.sym){
        case .sdl.K::n:
          .nKey = true;
        }
        switch(.sdle.key.keysym.sym){
        case .sdl.K::o:
          .oKey = true;
        }
        switch(.sdle.key.keysym.sym){
        case .sdl.K::p:
          .pKey = true;
        }
        switch(.sdle.key.keysym.sym){
        case .sdl.K::q:
          .qKey = true;
        }
        switch(.sdle.key.keysym.sym){
        case .sdl.K::r:
          .rKey = true;
        }
        switch(.sdle.key.keysym.sym){
        case .sdl.K::s:
          .sKey = true;
        }
        switch(.sdle.key.keysym.sym){
        case .sdl.K::t:
          .tKey = true;
        }
        switch(.sdle.key.keysym.sym){
        case .sdl.K::u:
          .uKey = true;
        }
        switch(.sdle.key.keysym.sym){
        case .sdl.K::v:
          .vKey = true;
        }
        switch(.sdle.key.keysym.sym){
        case .sdl.K::w:
          .wKey = true;
        }
        switch(.sdle.key.keysym.sym){
        case .sdl.K::x:
          .xKey = true;
        }
        switch(.sdle.key.keysym.sym){
        case .sdl.K::y:
          .yKey = true;
        }
        switch(.sdle.key.keysym.sym){
        case .sdl.K::z:
          .zKey = true;
        }
        switch(.sdle.key.keysym.sym){
        case .sdl.K::KP_0:
          .kzeroKey = true;
        }
        switch(.sdle.key.keysym.sym){
        case .sdl.K::KP_1:
          .koneKey = true;
        }
        switch(.sdle.key.keysym.sym){
        case .sdl.K::KP_2:
          .ktwoKey = true;
        }
        switch(.sdle.key.keysym.sym){
        case .sdl.K::KP_3:
          .kthreeKey = true;
        }
        switch(.sdle.key.keysym.sym){
        case .sdl.K::KP_4:
          .kfourKey = true;
        }
        switch(.sdle.key.keysym.sym){
        case .sdl.K::KP_5:
          .kfiveKey = true;
        }
        switch(.sdle.key.keysym.sym){
        case .sdl.K::KP_6:
          .ksixKey = true;
        }
        switch(.sdle.key.keysym.sym){
        case .sdl.K::KP_7:
          .ksevenKey = true;
        }
        switch(.sdle.key.keysym.sym){
        case .sdl.K::KP_8:
          .keightKey = true;
        }
        switch(.sdle.key.keysym.sym){
        case .sdl.K::KP_9:
          .knineKey = true;
        }
        switch(.sdle.key.keysym.sym){
        case .sdl.K::_0:
          .zeroKey = true;
        }
        switch(.sdle.key.keysym.sym){
        case .sdl.K::_1:
          .oneKey = true;
        }
        switch(.sdle.key.keysym.sym){
        case .sdl.K::_2:
          .twoKey = true;
        }
        switch(.sdle.key.keysym.sym){
        case .sdl.K::_3:
          .threeKey = true;
        }
        switch(.sdle.key.keysym.sym){
        case .sdl.K::_4:
          .fourKey = true;
        }
        switch(.sdle.key.keysym.sym){
        case .sdl.K::_5:
          .fiveKey = true;
        }
        switch(.sdle.key.keysym.sym){
        case .sdl.K::_6:
          .sixKey = true;
        }
        switch(.sdle.key.keysym.sym){
        case .sdl.K::_7:
          .sevenKey = true;
        }
        switch(.sdle.key.keysym.sym){
        case .sdl.K::_8:
          .eightKey = true;
        }
        switch(.sdle.key.keysym.sym){
        case .sdl.K::_9:
          .nineKey = true;
        }
        switch(.sdle.key.keysym.sym){
        case .sdl.K::RETURN:
          .returnKey = true;
        }
        switch(.sdle.key.keysym.sym){
        case .sdl.K::LSHIFT:
          .lshiftKey = true;
        }
        switch(.sdle.key.keysym.sym){
        case .sdl.K::RSHIFT:
          .rshiftKey = true;
        }
      }
    }
  while .sdl.PollEvent(:.sdle=:):
  }
  ret !.end;
}

public bool event(int fps)
{
  uint uWait = (uint)1000 / (uint)fps;
  void nexttimeNext()
  {
    .nexttime += `uWait;
    .nexttimeFractionalPart += (float)(1000 % `fps) / (float)`fps;
    if(.nexttimeFractionalPart >= 1.0){
      .nexttime++;
      .nexttimeFractionalPart -= 1.0;
    }
  }
  branch{
    uint now = .sdl.GetTicks(::);
    uint dif = .nexttime - now;
    nexttimeNext();
  cond dif < uWait + 0x2:
    .sdl.Delay(:dif:);
  cond now - .lastdraw > 0d250:
  cond dif+0d17 < 0d17:
  else:
    if(-dif > 0d150){
      .nexttime = now;
      nexttimeNext();
    }
    .fskip = true;
    break;
  comm:
    .lastdraw = now;
    .fskip = false;
  }
  .esc = false;
  .upKey = false;
  .downKey = false;
  .leftKey = false;
  .rightKey = false;
  .aKey = false;
  .bKey = false;
  .cKey = false;
  .dKey = false;
  .eKey = false;
  .fKey = false;
  .gKey = false;
  .hKey = false;
  .iKey = false;
  .jKey = false;
  .kKey = false;
  .lKey = false;
  .mKey = false;
  .nKey = false;
  .oKey = false;
  .pKey = false;
  .qKey = false;
  .rKey = false;
  .sKey = false;
  .tKey = false;
  .uKey = false;
  .vKey = false;
  .wKey = false;
  .xKey = false;
  .yKey = false;
  .zKey = false;
  .kzeroKey = false;
  .koneKey = false;
  .ktwoKey = false;
  .kthreeKey = false;
  .kfourKey = false;
  .kfiveKey = false;
  .ksixKey = false;
  .ksevenKey = false;
  .keightKey = false;
  .knineKey = false;
  .zeroKey = false;
  .oneKey = false;
  .twoKey = false;
  .threeKey = false;
  .fourKey = false;
  .fiveKey = false;
  .sixKey = false;
  .sevenKey = false;
  .eightKey = false;
  .nineKey = false;
  .returnKey = false;
  .lshiftKey = false;
  .rshiftKey = false;
  ret .eventUpdate();
}
